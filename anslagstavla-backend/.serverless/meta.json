{
  "C:\\Users\\rebin\\anslagstavla\\anslagstavla-backend\\serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "C:\\Users\\rebin\\anslagstavla\\anslagstavla-backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "anslagstavla-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-north-1",
        "stage": "dev",
        "environment": {
          "MESSAGES_TABLE": "Messages"
        },
        "iam": {
          "role": "arn:aws:iam::946156973806:role/Swing-notes-role"
        },
        "httpApi": {
          "cors": true
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetMessagesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessages"
              }
            },
            "GetMessagesByUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessagesByUser"
              }
            },
            "CreateMessagesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-createMessages"
              }
            },
            "UpdateMessagesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/anslagstavla-api-dev-updateMessages"
              }
            },
            "GetMessagesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                  "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
                },
                "Handler": "functions/getMessages/getMessages.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "anslagstavla-api-dev-getMessages",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "Fetch all messages",
                "Environment": {
                  "Variables": {
                    "MESSAGES_TABLE": "Messages"
                  }
                },
                "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
              },
              "DependsOn": [
                "GetMessagesLogGroup"
              ]
            },
            "GetMessagesByUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                  "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
                },
                "Handler": "functions/getMessagesByUser/getMessagesByUser.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "anslagstavla-api-dev-getMessagesByUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "Fetch messages by username",
                "Environment": {
                  "Variables": {
                    "MESSAGES_TABLE": "Messages"
                  }
                },
                "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
              },
              "DependsOn": [
                "GetMessagesByUserLogGroup"
              ]
            },
            "CreateMessagesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                  "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
                },
                "Handler": "functions/createMessages/createMessages.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "anslagstavla-api-dev-createMessages",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "Create a new message",
                "Environment": {
                  "Variables": {
                    "MESSAGES_TABLE": "Messages"
                  }
                },
                "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
              },
              "DependsOn": [
                "CreateMessagesLogGroup"
              ]
            },
            "UpdateMessagesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                  "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
                },
                "Handler": "functions/updateMessages/updateMessages.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "anslagstavla-api-dev-updateMessages",
                "MemorySize": 1024,
                "Timeout": 6,
                "Description": "Update an existing message",
                "Environment": {
                  "Variables": {
                    "MESSAGES_TABLE": "Messages"
                  }
                },
                "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
              },
              "DependsOn": [
                "UpdateMessagesLogGroup"
              ]
            },
            "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMessagesLambdaFunction"
                },
                "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
                "Description": "Fetch all messages"
              }
            },
            "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMessagesByUserLambdaFunction"
                },
                "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
                "Description": "Fetch messages by username"
              }
            },
            "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMessagesLambdaFunction"
                },
                "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
                "Description": "Create a new message"
              }
            },
            "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMessagesLambdaFunction"
                },
                "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
                "Description": "Update an existing message"
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-anslagstavla-api",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "GET",
                    "POST",
                    "PUT"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetMessagesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetMessages": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetMessages": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /messages",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetMessages"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetMessages"
            },
            "GetMessagesByUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMessagesByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetMessagesByUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetMessagesByUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetMessagesUsernameVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /messages/{username}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetMessagesByUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetMessagesByUser"
            },
            "CreateMessagesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateMessages": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostMessages": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /messages",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateMessages"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateMessages"
            },
            "UpdateMessagesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateMessages": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateMessagesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutMessagesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /messages/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateMessages"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateMessages"
            },
            "MessagesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Messages",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "username",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "createdAt",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "username-createdAt-index",
                    "KeySchema": [
                      {
                        "AttributeName": "username",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "createdAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
              "Export": {
                "Name": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetMessagesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
              }
            },
            "GetMessagesByUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateMessagesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-CreateMessagesLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMessagesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-UpdateMessagesLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-anslagstavla-api-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getMessages": {
          "handler": "functions/getMessages/getMessages.handler",
          "description": "Fetch all messages",
          "events": [
            {
              "httpApi": {
                "path": "/messages",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/messages"
            }
          ],
          "name": "anslagstavla-api-dev-getMessages",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg"
        },
        "getMessagesByUser": {
          "handler": "functions/getMessagesByUser/getMessagesByUser.handler",
          "description": "Fetch messages by username",
          "events": [
            {
              "httpApi": {
                "path": "/messages/{username}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/messages/{username}"
            }
          ],
          "name": "anslagstavla-api-dev-getMessagesByUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM"
        },
        "createMessages": {
          "handler": "functions/createMessages/createMessages.handler",
          "description": "Create a new message",
          "events": [
            {
              "httpApi": {
                "path": "/messages",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/messages"
            }
          ],
          "name": "anslagstavla-api-dev-createMessages",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU"
        },
        "updateMessages": {
          "handler": "functions/updateMessages/updateMessages.handler",
          "description": "Update an existing message",
          "events": [
            {
              "httpApi": {
                "path": "/messages/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/messages/{id}"
            }
          ],
          "name": "anslagstavla-api-dev-updateMessages",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ"
        }
      },
      "resources": {
        "Resources": {
          "MessagesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Messages",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "username-createdAt-index",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "eu-north-1",
      "stage": "dev",
      "environment": {
        "MESSAGES_TABLE": "Messages"
      },
      "iam": {
        "role": "arn:aws:iam::946156973806:role/Swing-notes-role"
      },
      "httpApi": {
        "cors": true
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetMessagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessages"
            }
          },
          "GetMessagesByUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessagesByUser"
            }
          },
          "CreateMessagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/anslagstavla-api-dev-createMessages"
            }
          },
          "UpdateMessagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/anslagstavla-api-dev-updateMessages"
            }
          },
          "GetMessagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
              },
              "Handler": "functions/getMessages/getMessages.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "anslagstavla-api-dev-getMessages",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Fetch all messages",
              "Environment": {
                "Variables": {
                  "MESSAGES_TABLE": "Messages"
                }
              },
              "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
            },
            "DependsOn": [
              "GetMessagesLogGroup"
            ]
          },
          "GetMessagesByUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
              },
              "Handler": "functions/getMessagesByUser/getMessagesByUser.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "anslagstavla-api-dev-getMessagesByUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Fetch messages by username",
              "Environment": {
                "Variables": {
                  "MESSAGES_TABLE": "Messages"
                }
              },
              "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
            },
            "DependsOn": [
              "GetMessagesByUserLogGroup"
            ]
          },
          "CreateMessagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
              },
              "Handler": "functions/createMessages/createMessages.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "anslagstavla-api-dev-createMessages",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Create a new message",
              "Environment": {
                "Variables": {
                  "MESSAGES_TABLE": "Messages"
                }
              },
              "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
            },
            "DependsOn": [
              "CreateMessagesLogGroup"
            ]
          },
          "UpdateMessagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
                "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
              },
              "Handler": "functions/updateMessages/updateMessages.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "anslagstavla-api-dev-updateMessages",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Update an existing message",
              "Environment": {
                "Variables": {
                  "MESSAGES_TABLE": "Messages"
                }
              },
              "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
            },
            "DependsOn": [
              "UpdateMessagesLogGroup"
            ]
          },
          "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMessagesLambdaFunction"
              },
              "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
              "Description": "Fetch all messages"
            }
          },
          "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMessagesByUserLambdaFunction"
              },
              "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
              "Description": "Fetch messages by username"
            }
          },
          "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateMessagesLambdaFunction"
              },
              "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
              "Description": "Create a new message"
            }
          },
          "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateMessagesLambdaFunction"
              },
              "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
              "Description": "Update an existing message"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-anslagstavla-api",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST",
                  "PUT"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "GetMessagesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMessages": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetMessages": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /messages",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMessages"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMessages"
          },
          "GetMessagesByUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMessagesByUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMessagesByUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetMessagesByUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetMessagesUsernameVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /messages/{username}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMessagesByUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMessagesByUser"
          },
          "CreateMessagesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateMessages": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostMessages": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /messages",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateMessages"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateMessages"
          },
          "UpdateMessagesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateMessages": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateMessagesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutMessagesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /messages/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateMessages"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateMessages"
          },
          "MessagesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Messages",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "username-createdAt-index",
                  "KeySchema": [
                    {
                      "AttributeName": "username",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
            "Export": {
              "Name": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetMessagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg"
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
            }
          },
          "GetMessagesByUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM"
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateMessagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU"
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-CreateMessagesLambdaFunctionQualifiedArn"
            }
          },
          "UpdateMessagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ"
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-UpdateMessagesLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-anslagstavla-api-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "\r\nservice: anslagstavla-api\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: eu-north-1\r\n  stage: dev\r\n  environment:\r\n    MESSAGES_TABLE: Messages\r\n  iam:\r\n    role: arn:aws:iam::946156973806:role/Swing-notes-role\r\n  httpApi:\r\n    cors: true\r\n\r\nfunctions:\r\n  getMessages:\r\n    handler: functions/getMessages/getMessages.handler\r\n    description: \"Fetch all messages\"\r\n    events:\r\n      - httpApi:\r\n          path: /messages\r\n          method: get\r\n\r\n  getMessagesByUser:\r\n    handler: functions/getMessagesByUser/getMessagesByUser.handler\r\n    description: \"Fetch messages by username\"\r\n    events:\r\n      - httpApi:\r\n          path: /messages/{username}\r\n          method: get\r\n\r\n  createMessages:\r\n    handler: functions/createMessages/createMessages.handler\r\n    description: \"Create a new message\"\r\n    events:\r\n      - httpApi:\r\n          path: /messages\r\n          method: post\r\n\r\n  updateMessages:\r\n    handler: functions/updateMessages/updateMessages.handler\r\n    description: \"Update an existing message\"\r\n    events:\r\n      - httpApi:\r\n          path: /messages/{id}\r\n          method: put\r\n\r\nresources:\r\n  Resources:\r\n    MessagesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Messages\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: S\r\n          - AttributeName: username\r\n            AttributeType: S\r\n          - AttributeName: createdAt\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: username-createdAt-index\r\n            KeySchema:\r\n              - AttributeName: username\r\n                KeyType: HASH\r\n              - AttributeName: createdAt\r\n                KeyType: RANGE\r\n            Projection:\r\n              ProjectionType: ALL\r\n        BillingMode: PAY_PER_REQUEST\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "8e888f08-4fd0-4a61-9109-72038b256f4a",
    "orgName": "fe2024",
    "userId": "BlKlJrY8tvTcGnN6sb",
    "userName": "fe2024",
    "serviceProviderAwsAccountId": "946156973806",
    "serviceProviderAwsCfStackName": "anslagstavla-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-north-1:946156973806:stack/anslagstavla-api-dev/ca6ed340-9aee-11f0-ac1f-0610abe3ee6d",
    "serviceProviderAwsCfStackCreated": "2025-09-26T15:38:03.904Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-26T23:46:26.514Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CreateMessagesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:946156973806:function:anslagstavla-api-dev-createMessages:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-CreateMessagesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMessagesByUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:946156973806:function:anslagstavla-api-dev-getMessagesByUser:18",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMessagesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:946156973806:function:anslagstavla-api-dev-getMessages:18",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "fs5j45eeef",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-anslagstavla-api-dev-HttpApiId"
      },
      {
        "OutputKey": "UpdateMessagesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:946156973806:function:anslagstavla-api-dev-updateMessages:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-anslagstavla-api-dev-UpdateMessagesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
        "ExportName": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://fs5j45eeef.execute-api.eu-north-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-anslagstavla-api-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetMessagesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessages"
          }
        },
        "GetMessagesByUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/anslagstavla-api-dev-getMessagesByUser"
          }
        },
        "CreateMessagesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/anslagstavla-api-dev-createMessages"
          }
        },
        "UpdateMessagesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/anslagstavla-api-dev-updateMessages"
          }
        },
        "GetMessagesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
              "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
            },
            "Handler": "functions/getMessages/getMessages.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "anslagstavla-api-dev-getMessages",
            "MemorySize": 1024,
            "Timeout": 6,
            "Description": "Fetch all messages",
            "Environment": {
              "Variables": {
                "MESSAGES_TABLE": "Messages"
              }
            },
            "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
          },
          "DependsOn": [
            "GetMessagesLogGroup"
          ]
        },
        "GetMessagesByUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
              "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
            },
            "Handler": "functions/getMessagesByUser/getMessagesByUser.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "anslagstavla-api-dev-getMessagesByUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Description": "Fetch messages by username",
            "Environment": {
              "Variables": {
                "MESSAGES_TABLE": "Messages"
              }
            },
            "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
          },
          "DependsOn": [
            "GetMessagesByUserLogGroup"
          ]
        },
        "CreateMessagesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
              "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
            },
            "Handler": "functions/createMessages/createMessages.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "anslagstavla-api-dev-createMessages",
            "MemorySize": 1024,
            "Timeout": 6,
            "Description": "Create a new message",
            "Environment": {
              "Variables": {
                "MESSAGES_TABLE": "Messages"
              }
            },
            "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
          },
          "DependsOn": [
            "CreateMessagesLogGroup"
          ]
        },
        "UpdateMessagesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
              "S3Key": "serverless/anslagstavla-api/dev/1759319398490-2025-10-01T11:49:58.490Z/anslagstavla-api.zip"
            },
            "Handler": "functions/updateMessages/updateMessages.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "anslagstavla-api-dev-updateMessages",
            "MemorySize": 1024,
            "Timeout": 6,
            "Description": "Update an existing message",
            "Environment": {
              "Variables": {
                "MESSAGES_TABLE": "Messages"
              }
            },
            "Role": "arn:aws:iam::946156973806:role/Swing-notes-role"
          },
          "DependsOn": [
            "UpdateMessagesLogGroup"
          ]
        },
        "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetMessagesLambdaFunction"
            },
            "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
            "Description": "Fetch all messages"
          }
        },
        "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetMessagesByUserLambdaFunction"
            },
            "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
            "Description": "Fetch messages by username"
          }
        },
        "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateMessagesLambdaFunction"
            },
            "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
            "Description": "Create a new message"
          }
        },
        "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateMessagesLambdaFunction"
            },
            "CodeSha256": "iv1dJJFXiWAPJ2ebXg6By8zQBk10LcJ3Pm8tUFmWlrk=",
            "Description": "Update an existing message"
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-anslagstavla-api",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent",
                "X-Amzn-Trace-Id"
              ],
              "AllowMethods": [
                "OPTIONS",
                "GET",
                "POST",
                "PUT"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "GetMessagesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetMessagesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetMessages": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetMessagesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetMessages": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /messages",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetMessages"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetMessages"
        },
        "GetMessagesByUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetMessagesByUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetMessagesByUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetMessagesByUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetMessagesUsernameVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /messages/{username}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetMessagesByUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetMessagesByUser"
        },
        "CreateMessagesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateMessagesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateMessages": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateMessagesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostMessages": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /messages",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateMessages"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateMessages"
        },
        "UpdateMessagesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateMessagesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateMessages": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateMessagesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutMessagesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /messages/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateMessages"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateMessages"
        },
        "MessagesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Messages",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "username-createdAt-index",
                "KeySchema": [
                  {
                    "AttributeName": "username",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-eu-north-1-2582b265-c7f7",
          "Export": {
            "Name": "sls-anslagstavla-api-dev-ServerlessDeploymentBucketName"
          }
        },
        "GetMessagesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetMessagesLambdaVersion4UUPY1gvSxe7MPdEi1cahQoBDFZNOigtm4AZ1I1Lg"
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-GetMessagesLambdaFunctionQualifiedArn"
          }
        },
        "GetMessagesByUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetMessagesByUserLambdaVersion0MfBQOG2tfZVtlWklfJVVxAjzTg0l4gSo7bzqBycM"
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-GetMessagesByUserLambdaFunctionQualifiedArn"
          }
        },
        "CreateMessagesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateMessagesLambdaVersionQi2r65HCeZqg6759nWw6Avv5VEXyHn0iZbk6jj0NlU"
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-CreateMessagesLambdaFunctionQualifiedArn"
          }
        },
        "UpdateMessagesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateMessagesLambdaVersionhNn7NZObIbFcogZoS2OVCVtLrt9qqalBO3mXnrQ"
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-UpdateMessagesLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-anslagstavla-api-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}